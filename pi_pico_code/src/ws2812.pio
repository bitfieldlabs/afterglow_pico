;***********************************************************************
;*   ___  ___  ___  ___  ___  ___   _    ___  _ _ _ 
;*  | . || __>|_ _|| __>| . \/  _> | |  | . || | | |
;*  |   || _>  | | | _> |   /| <_/\| |_ | | || | | |
;*  |_|_||_|   |_| |___>|_\_\`____/|___|`___'|__/_/ 
;*                                                  pico
;*      Copyright (c) 2021 bitfield labs
;*
;***********************************************************************
;*  This file is part of the afterglow pinball LED project:
;*  https://github.com/bitfieldlabs/afterglow_pico
;*
;*  afterglow is free software: you can redistribute it and/or modify
;*  it under the terms of the GNU Lesser General Public License as
;*  published by the Free Software Foundation, either version 3 of the
;*  License, or (at your option) any later version.
;*
;*  afterglow is distributed in the hope that it will be useful,
;*  but WITHOUT ANY WARRANTY; without even the implied warranty of
;*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;*  GNU Lesser General Public License for more details.
;*
;*  You should have received a copy of the GNU Lesser General Public
;*  License along with afterglow.
;*  If not, see <http://www.gnu.org/licenses/>.
;***********************************************************************


.program ws2812
.side_set 1

.define public T1 2
.define public T2 5
.define public T3 3

.wrap_target
bitloop:
    out x, 1       side 0 [T3 - 1] ; Side-set still takes place when instruction stalls
    jmp !x do_zero side 1 [T1 - 1] ; Branch on the bit we shifted out. Positive pulse
do_one:
    jmp  bitloop   side 1 [T2 - 1] ; Continue driving high, for a long pulse
do_zero:
    nop            side 0 [T2 - 1] ; Or drive low, for a short pulse
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

#include "hardware/clocks.h"

static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin, float freq, bool rgbw) {

    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = ws2812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, rgbw ? 32 : 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    int cycles_per_bit = ws2812_T1 + ws2812_T2 + ws2812_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}